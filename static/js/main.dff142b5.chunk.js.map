{"version":3,"sources":["components/Question.js","components/TaskList.js","components/FinalScrin.js","components/App.js","serviceWorker.js","index.js"],"names":["Question","props","arr","anserws","all","anserw","question","category","counter","counters","myHandler","id","changeCounter","item","length","replace","split","join","correct_answer","incorrect_answers","charAt","indexChar","indexOf","firstPartAnserw","substring","remainingPart","substr","concat","str","x","y","newIndex","i","a","push","Object","toConsumableArray","fixIndexArray","randomIndex","temporaryValue","currentIndex","Math","floor","random","react_default","createElement","className","onClick","TaksList","state","activeTaskList","this","setState","items","result","map","components_Question","key","Component","FinalScrin","time","score","mistakes","milis","Date","getTime","restart","QuizApp","inactive","active","results","toggleClass","e","_this","API","target","fetch","then","resposne","ok","Error","status","json","data","prevState","_this$state","components_TaskList","src_components_FinalScrin","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAkLeA,SA3KE,SAACC,GACd,IAQIC,EAREC,EAAU,CACZC,IAAK,GACLC,OAAQ,GACRC,SAAU,GACVC,SAAU,IAKVC,EAAUP,EAAMQ,SAMpB,GAAIR,EAAMQ,SAAW,GAAI,CAIrB,IAAMC,EAAY,SAACC,EAAIN,GACfM,IAAON,EAGPJ,EAAMW,cAFQ,EACG,GAEVD,IAAON,GAGdJ,EAAMW,cADQ,EADG,IAWzB,GAFAV,EAAMD,EAAMY,KAERZ,EAAMY,KAAKC,OAAS,EAWpB,GAVAX,EAAQG,SAAWJ,EAAIM,GAASF,SAASS,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAO,QAAKA,QAAQ,OAAO,IAAIA,QAAQ,OAAO,KAAKA,QAAQ,OAAO,QAAKA,QAAQ,UAAU,QAAKA,QAAQ,OAAO,KAAKA,QAAQ,OAAO,KAG9aZ,EAAQI,SAAWL,EAAIM,GAASD,SAASS,MAAM,iBAAiBC,KAAK,KACrEd,EAAQE,OAASH,EAAIM,GAASU,eAC9Bf,EAAQC,IAAMF,EAAIM,GAASW,kBAKK,GAA5BhB,EAAQE,OAAOe,OAAO,IAAWjB,EAAQE,OAAOS,OAAO,EAAG,CAC1D,IAAIO,EAAYlB,EAAQE,OAAOiB,QAAQ,KACnCC,EAAkBpB,EAAQE,OAAOmB,UAAUH,GAAY,GACvDI,EAAgBtB,EAAQE,OAAOqB,OAAOL,EAAY,GACtDlB,EAAQE,OAAR,GAAAsB,OAAoBJ,EAApB,OAAAI,OAAyCF,GAEzC,IAAIG,EAAMzB,EAAQC,IAAIa,KAAK,KAAKD,MAAM,QAClCa,EAAI,GACJC,EAAI,GAEJC,EAAW,GACf5B,EAAQC,IAAM,GAEd,IAAK,IAAI4B,EAAI,EAAGA,EAAIJ,EAAId,OAAQkB,IAAK,CAGjC,IAAIC,EAAIL,EAAII,GAAGjB,QAAQ,MAAO,IAG1BiB,EAAI,IAAM,IACVH,EAAII,GAEJD,EAAI,IAAM,IACVF,EAAIG,EACJJ,EAAI,IAEE,KAANA,GAAkB,KAANC,IAEZC,EAAQ,GAAAJ,OAAME,EAAN,OAAAF,OAAaG,GACrB3B,EAAQC,IAAI8B,KAAKH,IAOzB5B,EAAQC,IAAR,GAAAuB,OAAAQ,OAAAC,EAAA,EAAAD,CAAkBhC,EAAQC,KAA1B,CAA+BD,EAAQE,aAGpC,CAKH,IAHA,IAAIuB,EAAM1B,EAAIM,GAASW,kBAGda,EAAI,EAAGA,EAAIJ,EAAId,OAAQkB,IAAK,CACjC,IAAIK,EAAgBT,EAAII,GAAGjB,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAO,QAAKA,QAAQ,OAAO,IAAIA,QAAQ,OAAO,KAAKA,QAAQ,OAAO,QAAKA,QAAQ,OAAO,KAAKA,QAAQ,OAAO,KAAKA,QAAQ,UAAU,QAChaZ,EAAQC,IAAI4B,GAAKK,EAIrBlC,EAAQE,OAASH,EAAIM,GAASU,eAAeH,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAO,QAAKA,QAAQ,OAAO,IAAIA,QAAQ,OAAO,KAG/VZ,EAAQC,IAAR,GAAAuB,OAAAQ,OAAAC,EAAA,EAAAD,CAAkBhC,EAAQC,KAA1B,CAA+BD,EAAQE,SAO/C,GAA2B,IAAvBF,EAAQC,IAAIU,OAEZ,IADA,IAAuCwB,EAAaC,EAAhDC,EAAerC,EAAQC,IAAIU,OACxB,IAAM0B,GAGTF,EAAcG,KAAKC,MAAMD,KAAKE,SAAWH,GACzCA,GAAgB,EAGhBD,EAAiBpC,EAAQC,IAAIoC,GAC7BrC,EAAQC,IAAIoC,GAAgBrC,EAAQC,IAAIkC,GACxCnC,EAAQC,IAAIkC,GAAeC,EAQnC,GAAItC,EAAMY,KAAKC,OAAS,EAAG,KACfR,EAA2BH,EAA3BG,SAAUF,EAAiBD,EAAjBC,IAAKC,EAAYF,EAAZE,OAEvB,OAEIuC,EAAAX,EAAAY,cAAA,WAEID,EAAAX,EAAAY,cAAA,MAAIC,UAAU,YACVF,EAAAX,EAAAY,cAAA,UAAKvC,GACLsC,EAAAX,EAAAY,cAAA,UAAID,EAAAX,EAAAY,cAAA,UAAQE,QAAS,kBAAMrC,EAAUN,EAAI,GAAIC,IAASM,GAAIP,EAAI,IAAMA,EAAI,KACxEwC,EAAAX,EAAAY,cAAA,UAAID,EAAAX,EAAAY,cAAA,UAAQE,QAAS,kBAAMrC,EAAUN,EAAI,GAAIC,IAASM,GAAIP,EAAI,IAAMA,EAAI,KACxEwC,EAAAX,EAAAY,cAAA,UAAID,EAAAX,EAAAY,cAAA,UAAQE,QAAS,kBAAMrC,EAAUN,EAAI,GAAIC,IAASM,GAAIP,EAAI,IAAMA,EAAI,KACxEwC,EAAAX,EAAAY,cAAA,UAAID,EAAAX,EAAAY,cAAA,UAAQE,QAAS,kBAAMrC,EAAUN,EAAI,GAAIC,IAASM,GAAIP,EAAI,IAAMA,EAAI,OASpF,OACIwC,EAAAX,EAAAY,cAAA,YAGL,OAAuB,KAAnB5C,EAAMQ,UACbP,EAAK,GAED0C,EAAAX,EAAAY,cAAA,aAQAD,EAAAX,EAAAY,cAAA,cCvHGG,6MA3CbC,MAAQ,CACNC,gBAAgB,uFAMZC,KAAKF,MAAMC,gBACbC,KAAKC,SAAS,CACZF,gBAAgB,qCAYpB,IAAIG,EAAQ,GAEZ,GAAIF,KAAKlD,MAAMqD,OAAOxC,OAAS,EAAG,CAEhC,IAAMZ,EAAMiD,KAAKlD,MAAMqD,QAEvBD,EAAKlB,OAAAC,EAAA,EAAAD,CAAOjC,IACNqD,IAAI,SAAA1C,GAAI,OAAK+B,EAAAX,EAAAY,cAACW,EAAD,CACjBC,IAAK5C,EAAKP,SAAUO,KAAMwC,MAI9B,OACET,EAAAX,EAAAY,cAAA,OAAKC,UAAU,WACbF,EAAAX,EAAAY,cAAA,OAAKC,UAAWK,KAAKF,MAAMC,eAAiB,KAAO,kBACjDN,EAAAX,EAAAY,cAACW,EAAD,CAAU3C,KAAMwC,EAAO5C,SAAU0C,KAAKlD,MAAMQ,SAAUG,cAAeuC,KAAKlD,MAAMW,yBAxCnE8C,aCoBRC,SArBI,SAAC1D,GAAU,IAClB2D,EAA0B3D,EAA1B2D,KAAMC,EAAoB5D,EAApB4D,MAAOC,EAAa7D,EAAb6D,SAEfC,GADO,IAAIC,MAAOC,UACHL,EAMrB,OACIhB,EAAAX,EAAAY,cAAA,OAAKC,UAAU,SACXF,EAAAX,EAAAY,cAAA,UACID,EAAAX,EAAAY,cAAA,4BAAAlB,OAAoBc,KAAKC,MAAOqB,EAAQ,IAAQ,IAAhD,UACAnB,EAAAX,EAAAY,cAAA,iCAAyBgB,EAAzB,KACAjB,EAAAX,EAAAY,cAAA,iCAAyBiB,EAAzB,KACAlB,EAAAX,EAAAY,cAAA,UAAID,EAAAX,EAAAY,cAAA,UAAQE,QAAS,WAT7B9C,EAAMiE,YASM,eCuHLC,6MAnIblB,MAAQ,CACNW,KAAM,GACNQ,UAAU,EACVC,QAAQ,EACRnB,gBAAgB,EAChBW,MAAO,EACPC,SAAU,EACVtD,QAAS,EAET8D,QAAS,MAOXC,YAAc,SAACC,GACb,IAAMJ,EAAWK,EAAKxB,MAAMmB,SACtBC,EAASI,EAAKxB,MAAMoB,OACpBT,GAAO,IAAII,MAAOC,UAClBf,EAAiBuB,EAAKxB,MAAMC,eAElCuB,EAAKrB,SACH,CACEgB,UAAWA,EACXC,QAASA,EACTnB,gBAAiBA,EACjBU,SAGJ,IAAIc,EAAM,GAGU,SAAhBF,EAAEG,OAAOhE,GACX+D,EAAM,iGAEmB,eAAhBF,EAAEG,OAAOhE,GAClB+D,EAAM,iGACmB,gBAAhBF,EAAEG,OAAOhE,GAClB+D,EAAM,iGACmB,WAAhBF,EAAEG,OAAOhE,KAClB+D,EAAM,kGAGRE,MAAMF,GACHG,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAMF,EAASG,UAEtBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAC1BL,KAAK,SAAAM,GAEJV,EAAKrB,SAAS,CACZkB,QAASa,EAAKb,eAYtB1D,cAAgB,SAACiD,EAAOC,GAClBD,EAGFY,EAAKrB,SAAS,SAAAgC,GAAS,MAAK,CAC1B5E,QAAS4E,EAAU5E,QAAU,EAC7BqD,MAAOuB,EAAUvB,MAAQ,KAElBC,GAGTW,EAAKrB,SAAS,SAAAgC,GAAS,MAAK,CAC1B5E,QAAS4E,EAAU5E,QAAU,EAC7BsD,SAAUsB,EAAUtB,SAAW,QAMrCI,QAAU,WACRO,EAAKrB,SAAS,CACZQ,KAAM,GACNQ,UAAU,EACVC,QAAQ,EACRnB,gBAAgB,EAChBW,MAAO,EACPC,SAAU,EACVtD,QAAS,EAET8D,QAAS,8EAMJ,IAAAe,EAG6ClC,KAAKF,MAAjDqB,EAHDe,EAGCf,QAAS9D,EAHV6E,EAGU7E,QAASoD,EAHnByB,EAGmBzB,KAAMC,EAHzBwB,EAGyBxB,MAAOC,EAHhCuB,EAGgCvB,SAEvC,OACElB,EAAAX,EAAAY,cAAA,OAAKC,UAAU,iBACbF,EAAAX,EAAAY,cAAA,OAAKC,UAAWK,KAAKF,MAAMmB,SAAW,WAAa,UACjDxB,EAAAX,EAAAY,cAAA,2BACAD,EAAAX,EAAAY,cAAA,UAAQE,QAASI,KAAKoB,YAAa5D,GAAG,QAAtC,QACAiC,EAAAX,EAAAY,cAAA,UAAQE,QAASI,KAAKoB,YAAa5D,GAAG,cAAtC,cACAiC,EAAAX,EAAAY,cAAA,UAAQE,QAASI,KAAKoB,YAAa5D,GAAG,eAAtC,qBACAiC,EAAAX,EAAAY,cAAA,UAAQE,QAASI,KAAKoB,YAAa5D,GAAG,UAAtC,WAIFiC,EAAAX,EAAAY,cAACyC,EAAD,CAAWhC,OAAQgB,EAAS7D,SAAUD,EAASI,cAAeuC,KAAKvC,gBAE3C,KAAvBuC,KAAKF,MAAMzC,QAAiBoC,EAAAX,EAAAY,cAAC0C,EAAD,CAAY3B,KAAMA,EAAMC,MAAOA,EAAOC,SAAUA,EAAUI,QAASf,KAAKe,UAAc,aAzHrGR,aCOF8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlD,EAAAX,EAAAY,cAACkD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.dff142b5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Question = (props) => {\r\n    const anserws = {\r\n        all: [],\r\n        anserw: '',\r\n        question: '',\r\n        category: '',\r\n\r\n    }\r\n\r\n    let arr;\r\n    let counter = props.counters\r\n\r\n\r\n\r\n  \r\n\r\n    if (props.counters < 10) {\r\n\r\n\r\n\r\n        const myHandler = (id, anserw) => {\r\n            if (id === anserw) {\r\n                const score = 1;\r\n                const mistakes = 0;\r\n                props.changeCounter( score, mistakes)\r\n            } else if (id !== anserw) {\r\n                const mistakes = 1;\r\n                const score = 0;\r\n                props.changeCounter( score, mistakes)\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        arr = props.item\r\n\r\n        if (props.item.length > 0) {\r\n            anserws.question = arr[counter].question.replace(/%20/g, ' ').replace(/%3F/g, '?').replace(/%28/g, '(').replace(/%29/g, ')').replace(/%2C/g, ',').replace(/%22/g, '\"').replace(/%3A/g, ':').replace(/%27/g, \"'\").replace(/%26/g, \"&\").replace(/%60/g, \"`\").replace(/%2B/g, \"+\").replace(/%23/g, \"#\").replace(/%C4/g,\"Ä\").replace(/%81/g,\"\").replace(/%3C/g,\"<\").replace(/%B1/g,\"±\").replace(/%C3%A9/g,\"é\").replace(/%21/g,\"!\").replace(/%2F/g,\"/\")\r\n          \r\n\r\n            anserws.category = arr[counter].category.split(/[%0123456789]/).join(\" \")\r\n            anserws.anserw = arr[counter].correct_answer\r\n            anserws.all = arr[counter].incorrect_answers\r\n\r\n\r\n\r\n            // eslint-disable-next-line eqeqeq\r\n            if (anserws.anserw.charAt(0) == 7 && anserws.anserw.length>2) {\r\n                let indexChar = anserws.anserw.indexOf(\"%\");\r\n                let firstPartAnserw = anserws.anserw.substring(indexChar, -1);\r\n                let remainingPart = anserws.anserw.substr(indexChar + 7);\r\n                anserws.anserw = `${firstPartAnserw} - ${remainingPart}`\r\n\r\n                let str = anserws.all.join(\",\").split(/[-,]/);\r\n                let x = '';\r\n                let y = '';\r\n                // eslint-disable-next-line no-unused-vars\r\n                let newIndex = '';\r\n                anserws.all = [];\r\n\r\n                for (let i = 0; i < str.length; i++) {\r\n\r\n\r\n                    let a = str[i].replace('%20', '');\r\n\r\n\r\n                    if (i % 2 === 1) {\r\n                        x = a\r\n                    }\r\n                    if (i % 2 === 0) {\r\n                        y = a;\r\n                        x = '';\r\n                    }\r\n                    if (x !== \"\" && y !== \"\") {\r\n\r\n                        newIndex = `${x} - ${y}`;\r\n                        anserws.all.push(newIndex);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                anserws.all = [...anserws.all, anserws.anserw]\r\n\r\n\r\n            } else {\r\n\r\n                let str = arr[counter].incorrect_answers;\r\n\r\n\r\n                for (let i = 0; i < str.length; i++) {\r\n                    let fixIndexArray = str[i].replace(/%20/g, ' ').replace(/%3F/g, '?').replace(/%28/g, '(').replace(/%29/g, ')').replace(/%2C/g, ',').replace(/%22/g, '\"').replace(/%3A/g, ':').replace(/%27/g, \"'\").replace(/%26/g, \"&\").replace(/%60/g, \"`\").replace(/%2B/g, \"+\").replace(/%23/g, \"#\").replace(/%C4/g,\"Ä\").replace(/%81/g,\"\").replace(/%3C/g,\"<\").replace(/%B1/g,\"±\").replace(/%2F/g,\"/\").replace(/%3B/g,\";\").replace(/%C3%A9/g,\"é\")\r\n                    anserws.all[i] = fixIndexArray;\r\n\r\n                }\r\n\r\n                anserws.anserw = arr[counter].correct_answer.replace(/%20/g, ' ').replace(/%3F/g, '?').replace(/%28/g, '(').replace(/%29/g, ')').replace(/%2C/g, ',').replace(/%22/g, '\"').replace(/%3A/g, ':').replace(/%27/g, \"'\").replace(/%26/g, \"&\").replace(/%60/g, \"`\").replace(/%2B/g, \"+\").replace(/%23/g, \"#\").replace(/%C4/g,\"Ä\").replace(/%81/g,\"\").replace(/%2F/g,\"/\")\r\n\r\n\r\n                anserws.all = [...anserws.all, anserws.anserw]\r\n\r\n            }\r\n\r\n\r\n        }\r\n        //Mixing anserws\r\n        if (anserws.all.length !== 0) {\r\n            let currentIndex = anserws.all.length, randomIndex, temporaryValue\r\n            while (0 !== currentIndex) {\r\n\r\n\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex -= 1;\r\n\r\n\r\n                temporaryValue = anserws.all[currentIndex];\r\n                anserws.all[currentIndex] = anserws.all[randomIndex];\r\n                anserws.all[randomIndex] = temporaryValue;\r\n\r\n\r\n            }\r\n\r\n        }\r\n     \r\n\r\n        if (props.item.length > 0) {\r\n            const { question, all, anserw, } = anserws\r\n\r\n            return (\r\n          \r\n                <div>\r\n                  \r\n                    <ul className=\"question\">\r\n                        <li>{question}</li>\r\n                        <li><button onClick={() => myHandler(all[0], anserw)} id={all[0]} >{all[0]}</button></li>\r\n                        <li><button onClick={() => myHandler(all[1], anserw)} id={all[1]} >{all[1]}</button></li>\r\n                        <li><button onClick={() => myHandler(all[2], anserw)} id={all[2]} >{all[2]}</button></li>\r\n                        <li><button onClick={() => myHandler(all[3], anserw)} id={all[3]} >{all[3]}</button></li>\r\n\r\n\r\n                    </ul>\r\n                    \r\n\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div></div>\r\n            )\r\n        }\r\n    } else if (props.counters === 10 ) {\r\n        arr =[];\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    } else \r\n     {\r\n\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Question;\r\n\r\n","import React, { Component } from 'react';\r\nimport './TaskList.css'\r\nimport Question from './Question'\r\n\r\nclass TaksList extends Component {\r\n\r\n\r\n\r\n  state = {\r\n    activeTaskList: true,\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.activeTaskList) {\r\n      this.setState({\r\n        activeTaskList: false,\r\n        \r\n      })\r\n\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n\r\n    let items = ''\r\n    \r\n    if (this.props.result.length > 0) {\r\n\r\n      const arr = this.props.result\r\n      \r\n      items = [...arr]\r\n      items.map(item => (<Question\r\n        key={item.question} item={items} />))\r\n\r\n      }\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className={this.state.activeTaskList ? null : \"activeTaskList\"}>\r\n          <Question item={items} counters={this.props.counters} changeCounter={this.props.changeCounter} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaksList;","import React from 'react';\r\nimport './FinalScrin.css';\r\n\r\nconst FinalScrin = (props) => {\r\n    const { time, score, mistakes } = props;\r\n    const date = new Date().getTime();\r\n    const milis = date - time;\r\n\r\n    const restart = () => {\r\n        props.restart()\r\n    }\r\n\r\n    return (\r\n        <div className=\"final\">\r\n            <ul>\r\n                <li>Your time : {`${Math.floor((milis / 1000) % 60)}s`} </li>\r\n                <li>You scored points : {score} </li>\r\n                <li>You made mistakes : {mistakes} </li>\r\n                <li><button onClick={() => restart()} >Again?</button></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinalScrin;","import React, { Component } from 'react';\nimport './App.css'\nimport TaskList from './TaskList'\nimport FinalScrin from './FinalScrin'\n\nclass QuizApp extends Component {\n  state = {\n    time: \"\",\n    inactive: false,\n    active: true,\n    activeTaskList: true,\n    score: 0,\n    mistakes: 0,\n    counter: 0,\n\n    results: [],\n\n\n  }\n\n\n\n  toggleClass = (e) => {\n    const inactive = this.state.inactive;\n    const active = this.state.active;\n    const time = new Date().getTime();\n    const activeTaskList = this.state.activeTaskList;\n\n    this.setState(\n      {\n        inactive: !inactive,\n        active: !active,\n        activeTaskList: !activeTaskList,\n        time,\n\n      })\n    let API = '';\n\n\n    if (e.target.id === \"film\") {\n      API = \"https://opentdb.com/api.php?amount=10&category=11&difficulty=easy&type=multiple&encode=url3986\";\n\n    } else if (e.target.id === \"video game\") {\n      API = 'https://opentdb.com/api.php?amount=10&category=15&difficulty=easy&type=multiple&encode=url3986';\n    } else if (e.target.id === \"mathematics\") {\n      API = 'https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple&encode=url3986';\n    } else if (e.target.id === \"sports\") {\n      API = 'https://opentdb.com/api.php?amount=10&category=21&difficulty=easy&type=multiple&encode=url3986';\n    }\n\n    fetch(API)\n      .then(resposne => {\n        if (resposne.ok) {\n          return resposne;\n        }\n        throw Error(resposne.status)\n      })\n      .then(resposne => resposne.json())\n      .then(data => {\n\n        this.setState({\n          results: data.results\n\n        })\n\n      })\n\n\n\n  }\n\n\n\n  changeCounter = (score, mistakes) => {\n    if (score) {\n\n\n      this.setState(prevState => ({\n        counter: prevState.counter + 1,\n        score: prevState.score + 1,\n      }))\n    } else if (mistakes) {\n\n\n      this.setState(prevState => ({\n        counter: prevState.counter + 1,\n        mistakes: prevState.mistakes + 1,\n      }))\n\n    }\n  }\n\n  restart = () => {\n    this.setState({\n      time: \"\",\n      inactive: false,\n      active: true,\n      activeTaskList: true,\n      score: 0,\n      mistakes: 0,\n      counter: 0,\n\n      results: [],\n\n    })\n   \n  }\n\n  render() {\n\n\n    const { results, counter, time, score, mistakes } = this.state\n\n    return (\n      <div className=\"wrapp active \">\n        <div className={this.state.inactive ? \"inactive\" : \"active\"}>\n          <p>pick your test</p>\n          <button onClick={this.toggleClass} id=\"film\">film</button>\n          <button onClick={this.toggleClass} id=\"video game\">video game</button>\n          <button onClick={this.toggleClass} id=\"mathematics\">Science computers</button>\n          <button onClick={this.toggleClass} id=\"sports\">sports</button>\n        </div>\n\n\n        <TaskList  result={results} counters={counter} changeCounter={this.changeCounter}/>\n\n        {this.state.counter === 10 ? <FinalScrin time={time} score={score} mistakes={mistakes} restart={this.restart} /> : null}\n\n\n\n\n      </div>\n\n    );\n  }\n}\n\nexport default QuizApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}